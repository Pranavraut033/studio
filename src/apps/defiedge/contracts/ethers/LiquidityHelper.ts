/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface LiquidityHelperInterface extends utils.Interface {
  functions: {
    'getAmountsForLiquidity(address,int24,int24,uint128)': FunctionFragment;
    'getLiquidityForAmounts(address,int24,int24,uint256,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'getAmountsForLiquidity' | 'getLiquidityForAmounts'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getAmountsForLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLiquidityForAmounts',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'getAmountsForLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidityForAmounts', data: BytesLike): Result;

  events: {};
}

export interface LiquidityHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAmountsForLiquidity(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    getLiquidityForAmounts(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _amount0: PromiseOrValue<BigNumberish>,
      _amount1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;
  };

  getAmountsForLiquidity(
    _pool: PromiseOrValue<string>,
    _tickLower: PromiseOrValue<BigNumberish>,
    _tickUpper: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

  getLiquidityForAmounts(
    _pool: PromiseOrValue<string>,
    _tickLower: PromiseOrValue<BigNumberish>,
    _tickUpper: PromiseOrValue<BigNumberish>,
    _amount0: PromiseOrValue<BigNumberish>,
    _amount1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    getAmountsForLiquidity(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    getLiquidityForAmounts(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _amount0: PromiseOrValue<BigNumberish>,
      _amount1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAmountsForLiquidity(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLiquidityForAmounts(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _amount0: PromiseOrValue<BigNumberish>,
      _amount1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountsForLiquidity(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLiquidityForAmounts(
      _pool: PromiseOrValue<string>,
      _tickLower: PromiseOrValue<BigNumberish>,
      _tickUpper: PromiseOrValue<BigNumberish>,
      _amount0: PromiseOrValue<BigNumberish>,
      _amount1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
