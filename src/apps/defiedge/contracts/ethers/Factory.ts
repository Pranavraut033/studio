/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IStrategyBase {
  export type TickStruct = {
    tickLower: PromiseOrValue<BigNumberish>;
    tickUpper: PromiseOrValue<BigNumberish>;
  };

  export type TickStructOutput = [number, number] & {
    tickLower: number;
    tickUpper: number;
  };
}

export declare namespace IStrategyFactory {
  export type CreateStrategyParamsStruct = {
    operator: PromiseOrValue<string>;
    feeTo: PromiseOrValue<string>;
    managementFeeRate: PromiseOrValue<BigNumberish>;
    performanceFeeRate: PromiseOrValue<BigNumberish>;
    limit: PromiseOrValue<BigNumberish>;
    pool: PromiseOrValue<string>;
    usdAsBase: [PromiseOrValue<boolean>, PromiseOrValue<boolean>];
    ticks: IStrategyBase.TickStruct[];
  };

  export type CreateStrategyParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    [boolean, boolean],
    IStrategyBase.TickStructOutput[],
  ] & {
    operator: string;
    feeTo: string;
    managementFeeRate: BigNumber;
    performanceFeeRate: BigNumber;
    limit: BigNumber;
    pool: string;
    usdAsBase: [boolean, boolean];
    ticks: IStrategyBase.TickStructOutput[];
  };
}

export interface FactoryInterface extends utils.Interface {
  functions: {
    'MAX_DECIMAL()': FunctionFragment;
    'MAX_PROTOCOL_PERFORMANCE_FEES_RATE()': FunctionFragment;
    'acceptGovernance()': FunctionFragment;
    'allowedDeviation()': FunctionFragment;
    'allowedSlippage()': FunctionFragment;
    'chainlinkRegistry()': FunctionFragment;
    'changeAllowedSlippage(uint256)': FunctionFragment;
    'changeDefaultAllowedDeviation(uint256)': FunctionFragment;
    'changeFeeForStrategyCreation(uint256)': FunctionFragment;
    'changeFeeTo(address)': FunctionFragment;
    'changeGovernance(address)': FunctionFragment;
    'changeProtocolFeeRate(uint256)': FunctionFragment;
    'changeProtocolPerformanceFeeRate(uint256)': FunctionFragment;
    'claimFees(address)': FunctionFragment;
    'createStrategy((address,address,uint256,uint256,uint256,address,bool[2],(int24,int24)[]))': FunctionFragment;
    'denied(address)': FunctionFragment;
    'deny(address,bool)': FunctionFragment;
    'deployerProxy()': FunctionFragment;
    'feeTo()': FunctionFragment;
    'getHeartBeat(address,address)': FunctionFragment;
    'governance()': FunctionFragment;
    'isValidStrategy(address)': FunctionFragment;
    'oneInchRouter()': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'protocolFeeRate()': FunctionFragment;
    'protocolPerformanceFeeRate()': FunctionFragment;
    'setMinHeartbeat(address,address,uint256)': FunctionFragment;
    'strategyByIndex(uint256)': FunctionFragment;
    'strategyByManager(address)': FunctionFragment;
    'strategyCreationFee()': FunctionFragment;
    'totalIndex()': FunctionFragment;
    'uniswapV3Factory()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_DECIMAL'
      | 'MAX_PROTOCOL_PERFORMANCE_FEES_RATE'
      | 'acceptGovernance'
      | 'allowedDeviation'
      | 'allowedSlippage'
      | 'chainlinkRegistry'
      | 'changeAllowedSlippage'
      | 'changeDefaultAllowedDeviation'
      | 'changeFeeForStrategyCreation'
      | 'changeFeeTo'
      | 'changeGovernance'
      | 'changeProtocolFeeRate'
      | 'changeProtocolPerformanceFeeRate'
      | 'claimFees'
      | 'createStrategy'
      | 'denied'
      | 'deny'
      | 'deployerProxy'
      | 'feeTo'
      | 'getHeartBeat'
      | 'governance'
      | 'isValidStrategy'
      | 'oneInchRouter'
      | 'pendingGovernance'
      | 'protocolFeeRate'
      | 'protocolPerformanceFeeRate'
      | 'setMinHeartbeat'
      | 'strategyByIndex'
      | 'strategyByManager'
      | 'strategyCreationFee'
      | 'totalIndex'
      | 'uniswapV3Factory',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_DECIMAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_PROTOCOL_PERFORMANCE_FEES_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowedDeviation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowedSlippage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'chainlinkRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeAllowedSlippage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeDefaultAllowedDeviation', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeFeeForStrategyCreation', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeFeeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeProtocolFeeRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'changeProtocolPerformanceFeeRate',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'claimFees', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'createStrategy', values: [IStrategyFactory.CreateStrategyParamsStruct]): string;
  encodeFunctionData(functionFragment: 'denied', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deny', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'deployerProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getHeartBeat',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isValidStrategy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'oneInchRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolPerformanceFeeRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setMinHeartbeat',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'strategyByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'strategyByManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strategyCreationFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uniswapV3Factory', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_DECIMAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_PROTOCOL_PERFORMANCE_FEES_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedDeviation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedSlippage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chainlinkRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeAllowedSlippage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeDefaultAllowedDeviation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeFeeForStrategyCreation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeProtocolFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeProtocolPerformanceFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'denied', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deny', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployerProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHeartBeat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oneInchRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolPerformanceFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinHeartbeat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyByManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyCreationFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uniswapV3Factory', data: BytesLike): Result;

  events: {
    'ChangeDeviation(uint256)': EventFragment;
    'ChangeProtocolFee(uint256)': EventFragment;
    'ChangeProtocolPerformanceFee(uint256)': EventFragment;
    'ChangeSlippage(uint256)': EventFragment;
    'ChangeStrategyCreationFee(uint256)': EventFragment;
    'ClaimFees(address,uint256)': EventFragment;
    'NewStrategy(address,address)': EventFragment;
    'StrategyStatusChanged(bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ChangeDeviation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeProtocolFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeProtocolPerformanceFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeSlippage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeStrategyCreationFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStrategy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyStatusChanged'): EventFragment;
}

export interface ChangeDeviationEventObject {
  deviation: BigNumber;
}
export type ChangeDeviationEvent = TypedEvent<[BigNumber], ChangeDeviationEventObject>;

export type ChangeDeviationEventFilter = TypedEventFilter<ChangeDeviationEvent>;

export interface ChangeProtocolFeeEventObject {
  fee: BigNumber;
}
export type ChangeProtocolFeeEvent = TypedEvent<[BigNumber], ChangeProtocolFeeEventObject>;

export type ChangeProtocolFeeEventFilter = TypedEventFilter<ChangeProtocolFeeEvent>;

export interface ChangeProtocolPerformanceFeeEventObject {
  fee: BigNumber;
}
export type ChangeProtocolPerformanceFeeEvent = TypedEvent<[BigNumber], ChangeProtocolPerformanceFeeEventObject>;

export type ChangeProtocolPerformanceFeeEventFilter = TypedEventFilter<ChangeProtocolPerformanceFeeEvent>;

export interface ChangeSlippageEventObject {
  slippage: BigNumber;
}
export type ChangeSlippageEvent = TypedEvent<[BigNumber], ChangeSlippageEventObject>;

export type ChangeSlippageEventFilter = TypedEventFilter<ChangeSlippageEvent>;

export interface ChangeStrategyCreationFeeEventObject {
  amount: BigNumber;
}
export type ChangeStrategyCreationFeeEvent = TypedEvent<[BigNumber], ChangeStrategyCreationFeeEventObject>;

export type ChangeStrategyCreationFeeEventFilter = TypedEventFilter<ChangeStrategyCreationFeeEvent>;

export interface ClaimFeesEventObject {
  to: string;
  amount: BigNumber;
}
export type ClaimFeesEvent = TypedEvent<[string, BigNumber], ClaimFeesEventObject>;

export type ClaimFeesEventFilter = TypedEventFilter<ClaimFeesEvent>;

export interface NewStrategyEventObject {
  strategy: string;
  creater: string;
}
export type NewStrategyEvent = TypedEvent<[string, string], NewStrategyEventObject>;

export type NewStrategyEventFilter = TypedEventFilter<NewStrategyEvent>;

export interface StrategyStatusChangedEventObject {
  status: boolean;
}
export type StrategyStatusChangedEvent = TypedEvent<[boolean], StrategyStatusChangedEventObject>;

export type StrategyStatusChangedEventFilter = TypedEventFilter<StrategyStatusChangedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DECIMAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PROTOCOL_PERFORMANCE_FEES_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    allowedDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainlinkRegistry(overrides?: CallOverrides): Promise<[string]>;

    changeAllowedSlippage(
      _allowedSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeDefaultAllowedDeviation(
      _allowedDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeFeeForStrategyCreation(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeProtocolFeeRate(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeProtocolPerformanceFeeRate(
      _feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimFees(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createStrategy(
      params: IStrategyFactory.CreateStrategyParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    denied(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    deny(
      _strategy: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deployerProxy(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    getHeartBeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    isValidStrategy(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    oneInchRouter(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolPerformanceFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinHeartbeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategyByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    strategyByManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    strategyCreationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PROTOCOL_PERFORMANCE_FEES_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  allowedDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  allowedSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  chainlinkRegistry(overrides?: CallOverrides): Promise<string>;

  changeAllowedSlippage(
    _allowedSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeDefaultAllowedDeviation(
    _allowedDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeFeeForStrategyCreation(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeFeeTo(
    _feeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeProtocolFeeRate(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeProtocolPerformanceFeeRate(
    _feeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimFees(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createStrategy(
    params: IStrategyFactory.CreateStrategyParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  denied(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  deny(
    _strategy: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deployerProxy(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  getHeartBeat(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  isValidStrategy(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  oneInchRouter(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  protocolPerformanceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  setMinHeartbeat(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    _period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategyByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  strategyByManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  strategyCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_PERFORMANCE_FEES_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    allowedDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    allowedSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkRegistry(overrides?: CallOverrides): Promise<string>;

    changeAllowedSlippage(_allowedSlippage: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeDefaultAllowedDeviation(
      _allowedDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeFeeForStrategyCreation(_fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeFeeTo(_feeTo: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeGovernance(_governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeProtocolFeeRate(_fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeProtocolPerformanceFeeRate(_feeRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claimFees(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    createStrategy(params: IStrategyFactory.CreateStrategyParamsStruct, overrides?: CallOverrides): Promise<void>;

    denied(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    deny(_strategy: PromiseOrValue<string>, _status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    deployerProxy(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    getHeartBeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    isValidStrategy(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    oneInchRouter(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPerformanceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setMinHeartbeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    strategyByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    strategyByManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    strategyCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ChangeDeviation(uint256)'(deviation?: null): ChangeDeviationEventFilter;
    ChangeDeviation(deviation?: null): ChangeDeviationEventFilter;

    'ChangeProtocolFee(uint256)'(fee?: null): ChangeProtocolFeeEventFilter;
    ChangeProtocolFee(fee?: null): ChangeProtocolFeeEventFilter;

    'ChangeProtocolPerformanceFee(uint256)'(fee?: null): ChangeProtocolPerformanceFeeEventFilter;
    ChangeProtocolPerformanceFee(fee?: null): ChangeProtocolPerformanceFeeEventFilter;

    'ChangeSlippage(uint256)'(slippage?: null): ChangeSlippageEventFilter;
    ChangeSlippage(slippage?: null): ChangeSlippageEventFilter;

    'ChangeStrategyCreationFee(uint256)'(amount?: null): ChangeStrategyCreationFeeEventFilter;
    ChangeStrategyCreationFee(amount?: null): ChangeStrategyCreationFeeEventFilter;

    'ClaimFees(address,uint256)'(to?: null, amount?: null): ClaimFeesEventFilter;
    ClaimFees(to?: null, amount?: null): ClaimFeesEventFilter;

    'NewStrategy(address,address)'(
      strategy?: PromiseOrValue<string> | null,
      creater?: PromiseOrValue<string> | null,
    ): NewStrategyEventFilter;
    NewStrategy(
      strategy?: PromiseOrValue<string> | null,
      creater?: PromiseOrValue<string> | null,
    ): NewStrategyEventFilter;

    'StrategyStatusChanged(bool)'(status?: null): StrategyStatusChangedEventFilter;
    StrategyStatusChanged(status?: null): StrategyStatusChangedEventFilter;
  };

  estimateGas: {
    MAX_DECIMAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_PERFORMANCE_FEES_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    allowedDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    allowedSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    changeAllowedSlippage(
      _allowedSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeDefaultAllowedDeviation(
      _allowedDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeFeeForStrategyCreation(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeProtocolFeeRate(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeProtocolPerformanceFeeRate(
      _feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimFees(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createStrategy(
      params: IStrategyFactory.CreateStrategyParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    denied(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      _strategy: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deployerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    getHeartBeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    isValidStrategy(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    oneInchRouter(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    protocolPerformanceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setMinHeartbeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategyByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    strategyByManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strategyCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DECIMAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_PERFORMANCE_FEES_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    allowedDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAllowedSlippage(
      _allowedSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeDefaultAllowedDeviation(
      _allowedDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeFeeForStrategyCreation(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeProtocolFeeRate(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeProtocolPerformanceFeeRate(
      _feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimFees(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createStrategy(
      params: IStrategyFactory.CreateStrategyParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    denied(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      _strategy: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deployerProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHeartBeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidStrategy(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneInchRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolPerformanceFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinHeartbeat(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategyByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyByManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyCreationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
